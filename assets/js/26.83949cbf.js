(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{423:function(t,n,v){"use strict";v.r(n);var _=v(2),s=Object(_.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("strong",[t._v("业务组件")]),t._v("：业务组件是与应用程序的业务逻辑紧密相关的组件。它们通常是可重用的，可以在应用程序的不同部分使用。这些组件通常包含于数据交互，状态管理和用户交互相关的代码。例如，登录表单，购物车组件和用户列表等都可以视为业务组件")]),t._v(" "),n("p",[n("strong",[t._v("技术组件")]),t._v("：技术组件是与应用程序的技术实现相关的组件。它们通常是可重用的，用于处理特定的技术功能或实现通用的UI样式。这些组件通常包含与样式，路由，数据请求和状态管理无关的代码。例如，按钮组件，弹出框组件和表单校验组件都可以视为技术组件")]),t._v(" "),n("p",[n("strong",[t._v("划分组件的指导原则")])]),t._v(" "),n("p",[t._v("1.单一职责原则：每个组件应该只关注一个特定的功能或任务，这样可以使组件更加可重用和可测试")]),t._v(" "),n("p",[t._v("2.可组合性：组件应该是可组合的，可以与其他组件一起使用。这样可以构建更大的组件和应用程序")]),t._v(" "),n("p",[t._v("3.数据流动：组件之间的数据流动应该是单向的，从父组件到子组件。可以更好地追踪数据的变化和调试问题")]),t._v(" "),n("p",[t._v("4.分层架构：将组件按照层次结构进行组织，从而更好地分离业务逻辑和技术实现")])])}),[],!1,null,null,null);n.default=s.exports}}]);