(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{420:function(t,a,s){"use strict";s.r(a);var r=s(2),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-vue实现双向数据绑定原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue实现双向数据绑定原理是什么"}},[t._v("#")]),t._v(" 1.vue实现双向数据绑定原理是什么")]),t._v(" "),a("p",[t._v("响应式是数据驱动视图")]),t._v(" "),a("p",[t._v("双向绑定是数据和视图双向驱动")]),t._v(" "),a("p",[t._v("双向数据绑定指的是v-model指令的实现。它是一个语法糖 通过input时间和value值的语法糖")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- v-model 只是语法糖而已 --\x3e\n\x3c!-- v-model 在内部为不同的输入元素使用不同的property并抛出不同的事件 --\x3e\n\x3c!-- text和textarea 元素使用value property 和 input事件 --\x3e\n\x3c!-- checkbox 和radio使用checked  property 和 change事件--\x3e\n\x3c!-- select 字段将value 作为prop 并将change 作为事件 --\x3e\n")])])]),a("p",[t._v("v-on v-bind指令的结合")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("@input\n:value\n")])])]),a("h2",{attrs:{id:"_2-hash和history有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash和history有什么区别"}},[t._v("#")]),t._v(" 2.Hash和history有什么区别")]),t._v(" "),a("h3",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" Hash")]),t._v(" "),a("p",[t._v("hash模式是一种吧前端路由的路径用井号#拼接在真实url后面的模式。当井号#后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发onhashonchange事件")]),t._v(" "),a("h4",{attrs:{id:"网页url组成部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网页url组成部分"}},[t._v("#")]),t._v(" 网页url组成部分")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("location.protocal")]),t._v(" "),a("th",[t._v("协议")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("location.hostname")]),t._v(" "),a("td",[t._v("主机名")])]),t._v(" "),a("tr",[a("td",[t._v("location.host")]),t._v(" "),a("td",[t._v("主机")])]),t._v(" "),a("tr",[a("td",[t._v("location.port")]),t._v(" "),a("td",[t._v("端口号")])]),t._v(" "),a("tr",[a("td",[t._v("location.patchname")]),t._v(" "),a("td",[t._v("访问页面")])]),t._v(" "),a("tr",[a("td",[t._v("location.search")]),t._v(" "),a("td",[t._v("搜索内容")])]),t._v(" "),a("tr",[a("td",[t._v("location.hash")]),t._v(" "),a("td",[t._v("哈希值")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//http://127.0.0.1:8001/01-hash.html?a=100&b=20#/aaa/bbb\nlocation.protocal // 'http:'\nlocaltion.hostname // '127.0.0.1'\nlocation.host // '127.0.0.1:8001'\nlocation.port //8001\nlocation.pathname //'01-hash.html'\nlocation.serach // '?a=100&b=20'\nlocation.hash // '#/aaa/bbb'\n")])])]),a("h4",{attrs:{id:"hash的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash的特点"}},[t._v("#")]),t._v(" hash的特点")]),t._v(" "),a("p",[t._v("hash变化会触发网页跳转，即浏览器的前进和后退")]),t._v(" "),a("p",[t._v("hash可以改变url，但是不会触发页面重新加载（hash的改变是记录在window.history中）,即不会刷新页面，也就是说，所以页面的跳转都是在客户端进行操作。因此，这并不算是一次http请求，所以这种模式不利于"),a("code",[t._v("SEO")]),t._v("优化。"),a("code",[t._v("hash")]),t._v("只能修改"),a("code",[t._v("#")]),t._v("后面的部分，所以只能跳转到与当前"),a("code",[t._v("url")]),t._v("同文档的url")]),t._v(" "),a("p",[t._v("hash通过window.onhashchange的方式，来监听hash的改变，借此实现无刷新跳转的功能")]),t._v(" "),a("p",[t._v("hash永远不会提交到server端")]),t._v(" "),a("h3",{attrs:{id:"history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" History")]),t._v(" "),a("p",[t._v("history API是H5提供的新特性，允许开发者直接更改前端路由，即更新浏览器URL地址而不重新发起请求")]),t._v(" "),a("h4",{attrs:{id:"与hash的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与hash的区别"}},[t._v("#")]),t._v(" 与hash的区别")]),t._v(" "),a("p",[t._v("正常页面浏览")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://github.com/xxx 刷新页面\n\nhttps://github.com/xxx/yyy 刷新页面\n\nhttps://github.com/xxx/yyy/zzz 刷新页面\n\n")])])]),a("p",[t._v("history")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://github.com/xxx 刷新页面\n\nhttps://github.com/xxx/yyy 前端跳转，不刷新页面\n\nhttps://github.com/xxx/yyy/zzz 前端跳转，不刷新页面\n\n")])])]),a("h4",{attrs:{id:"history的api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history的api"}},[t._v("#")]),t._v(" history的API")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("API")]),t._v(" "),a("th",[t._v("定义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("history.pushState(data, title, [, url])")]),t._v(" "),a("td",[t._v("pushState主要用于往历史记录堆栈顶部添加一条记录。")])]),t._v(" "),a("tr",[a("td",[t._v("history.replaceState(data, title, [, url])")]),t._v(" "),a("td",[t._v("更改当前的历史记录，参数同上；上面的pushState是添加，这个更改")])]),t._v(" "),a("tr",[a("td",[t._v("history.state")]),t._v(" "),a("td",[t._v("用于存储以上方法的data数据，不同浏览器的读写权限不一样")])]),t._v(" "),a("tr",[a("td",[t._v("window.onpopstate")]),t._v(" "),a("td",[t._v("响应pushState或者replaceState的调用")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td")])])]),t._v(" "),a("h4",{attrs:{id:"history的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history的特点"}},[t._v("#")]),t._v(" history的特点")]),t._v(" "),a("p",[t._v("对于history来说，主要有以下特点：")]),t._v(" "),a("p",[t._v("新的url可以是与当前url同源的任意url，也可以是与当前url一样的地址，但是这样会导致把重复的这次操作记录到栈当中")]),t._v(" "),a("p",[t._v("通过history.state,添加任意类型的数据到记录中")]),t._v(" "),a("p",[t._v("可以额外设置title属性，以便后续使用")]),t._v(" "),a("p",[t._v("通过pushState，replaceState来实现无刷新跳转的功能")]),t._v(" "),a("h4",{attrs:{id:"存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[t._v("#")]),t._v(" 存在的问题")]),t._v(" "),a("p",[t._v("对于history来说，确实解决了不少hash存在的问题，但是也带来了新的问题。")]),t._v(" "),a("ul",[a("li",[t._v("使用history模式时，在对当前的页面进行刷新时，浏览器会重新发起请求，如果nginx没有匹配得到当前的url，就会出现404页面")]),t._v(" "),a("li",[t._v("而对于hash模式来说，虽然改变了url，但是不包括在http请求中，所以并不会影响服务端，因此改变hash并没有真正地改变url，所以页面路径还是之前的路径")]),t._v(" "),a("li",[t._v("因此在使用history模式时，需要通过服务器来允许地址可访问，如果没有设置，就很容易导致出现404的问题")])]),t._v(" "),a("h2",{attrs:{id:"_3-localstorage-sessionstorage-cookies-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-localstorage-sessionstorage-cookies-有什么区别"}},[t._v("#")]),t._v(" 3.localStorage sessionStorage cookies 有什么区别？")]),t._v(" "),a("p",[t._v("localStorage:以键值对的方式存储  存储时间没有限制")]),t._v(" "),a("p",[t._v("sessionStorage: 当前页面关闭后被清理与其他相比不能同源窗口共享是会话级别的存储方式")]),t._v(" "),a("p",[t._v("cookie：数据不能超过4k同时因为每次http请求都会携带cookie所有cookie只适合保存很晓得数据，如会话标识")]),t._v(" "),a("h2",{attrs:{id:"_4-说一下json-stringify有什么缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-说一下json-stringify有什么缺点"}},[t._v("#")]),t._v(" 4.说一下JSON.stringify有什么缺点？")]),t._v(" "),a("ul",[a("li",[t._v("如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式，而不是对象的形式")]),t._v(" "),a("li",[t._v("obj里面有RegExp（正则表达式），Error对象，则序列化的结果将只得到空对象")]),t._v(" "),a("li",[t._v("obj里有函数，undefined，则序列化的结果会把函数或undefined丢失")]),t._v(" "),a("li",[t._v("obj里有NaN，Infinity  和 -Inifinity,则序列化的结果会变成null")]),t._v(" "),a("li",[t._v("JSON.stringify()只能序列化对象的可枚举值的自有属性，例如obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor")]),t._v(" "),a("li",[t._v("如果对象中存在循环引用的情况也无法正确实现深拷贝；")])])])}),[],!1,null,null,null);a.default=v.exports}}]);