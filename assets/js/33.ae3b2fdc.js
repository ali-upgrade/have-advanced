(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{432:function(t,s,n){"use strict";n.r(s);var a=n(2),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"类组件的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类组件的生命周期"}},[t._v("#")]),t._v(" 类组件的生命周期")]),t._v(" "),s("p",[t._v("在讲 React 生命周期之前，有必要先来简单聊聊 React 两个重要阶段，render 阶段和 commit 阶段，React 在调和( render )阶段会深度遍历 React fiber 树，目的就是发现不同( diff )，不同的地方就是接下来需要更新的地方，对于变化的组件，就会执行 render 函数。在一次调和过程完毕之后，就到了commit 阶段，commit 阶段会创建修改真实的 DOM 节点。")]),t._v(" "),s("p",[t._v("如果在一次调和的过程中，发现了一个"),s("code",[t._v("fiber tag = 1")]),t._v("类组件的情况，就会安装类组件的逻辑来处理。按照类组件的处理逻辑，首先判断类组件是否被创建。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// react-reconciler/src/ReactFiberBeginWork.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateClassComponent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" shouldUpdate\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stateNode 是 fiber 指向 类组件实例的指针。")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// instance 为组件实例,如果组件实例不存在，证明该类组件没有被挂载过，那么会走初始化流程")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructClassInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 组件实例将在这个方法中被new。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mountClassInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("  workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("renderExpirationTime "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//初始化挂载组件流程")]),t._v("\n        shouldUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shouldUpdate 标识用来证明 组件是否需要更新。")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        shouldUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateClassInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Component"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" renderExpirationTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新组件流程")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldUpdate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         nextChildren "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 执行render函数 ，得到子节点 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildren")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("nextChildren"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("renderExpirationTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 继续调和子节点 */")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("几个重要的概念:")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("instance")]),t._v("类组件对应实例")]),t._v(" "),s("li",[s("code",[t._v("workInPropress")]),t._v("树，当前正在调和的fiber树，一次更新中，React会自上而下深度遍历子代fiber，如果遍历到一个fiber，会把当前fiber指向workInProgress")]),t._v(" "),s("li",[s("code",[t._v("current")]),t._v("树，在初始化更新中，current = null，在第一次fiber调和之后，将workInProgress树赋值给current树。React来用workInProgress和current来确保一次更新中，快速构建，并且状态不丢失")]),t._v(" "),s("li",[s("code",[t._v("Component")]),t._v("就是项目中的class组件")]),t._v(" "),s("li",[s("code",[t._v("nextProps")]),t._v("作为组件在一次更新中新的props")]),t._v(" "),s("li",[s("code",[t._v("renderExpirationTime")]),t._v("作为下次渲染的过去时间")])]),t._v(" "),s("p",[t._v("上面这个函数流程我已经标的很清楚了，同学们在学习React的过程中，重要的属性一定要拿小本本记下来，比如说类组件完成渲染挂载之后， React 用什么记录组件对应的 fiber 对象和类组件实例之间的关系。只有搞清楚这些，才能慢慢深入学习 React 。")]),t._v(" "),s("p",[t._v("在组件实例上可以通过 "),s("code",[t._v("_reactInternals")]),t._v(" 属性来访问组件对应的 fiber 对象。在 "),s("code",[t._v("fiber")]),t._v(" 对象上，可以通过 "),s("code",[t._v("stateNode")]),t._v(" 来访问当前 fiber 对应的组件实例。两者的关系如下图所示。")]),t._v(" "),s("h2",{attrs:{id:"react类组件生命周期执行过程揭秘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react类组件生命周期执行过程揭秘"}},[t._v("#")]),t._v(" React类组件生命周期执行过程揭秘")]),t._v(" "),s("p",[t._v("React 的大部分生命周期的执行，都在 "),s("code",[t._v("mountClassInstance")]),t._v(" 和"),s("code",[t._v("updateClassInstance")]),t._v(" 这两个方法中执行，所以为了让大家深入学习 React 生命周期的执行过程，我觉得有必要去揭秘这两个函数充当了什么角色。我把流程简化成 mount (初始化渲染) 和 update (更新)两个方向。")]),t._v(" "),s("p",[t._v("三个阶段："),s("em",[t._v("组件初始化")]),t._v("，"),s("em",[t._v("组件更新")]),t._v("，"),s("em",[t._v("组件销毁")])]),t._v(" "),s("h2",{attrs:{id:"初始化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[t._v("#")]),t._v(" 初始化阶段")]),t._v(" "),s("p",[s("em",[t._v("constructor执行")])]),t._v(" "),s("p",[t._v("在mount阶段，首先执行的constructClassInstance函数，用来实例化React组件，在组件章节")])])}),[],!1,null,null,null);s.default=e.exports}}]);