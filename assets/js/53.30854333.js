(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{449:function(e,s,a){"use strict";a.r(s);var t=a(2),n=Object(t.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"写一个loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写一个loader"}},[e._v("#")]),e._v(" 写一个loader")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 1.导出一个函数，该函数接收源代码作为参数\nmodule.exports = function (source) {\n  //2. 执行你的转换逻辑\n  //这里我们使用正则表达式将所有的console.log语句替换为空字符串\n  const modefiedSource = source.replace(/console\\.log\\(.+?);/g, '');\n  //3. 返回转换后的源代码\n  reurn modifedSource\n}\n")])])]),s("h2",{attrs:{id:"webpack配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack配置"}},[e._v("#")]),e._v(" webpack配置")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("module.exports = {\n  //其他配置...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/, //匹配.js文件\n        use: 'my-console-log-loader' //指定自定义的loader\n      }\n    ]\n  }\n}\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);